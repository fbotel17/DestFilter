{% extends 'base.html.twig' %}

{% block title %}Liste des Trajets
{% endblock %}

{% block body %}
	<div class="container">
		<h1 class="my-4">Liste des Trajets</h1>

		{# Formulaire de recherche existant #}
		<form id="searchFormOld" class="form-inline mb-4">
			<div class="form-group mr-2">
				<label for="searchAttributeOld" class="sr-only">Rechercher par</label>
				<select name="attribute" id="searchAttributeOld" class="form-control">
					<option value="depart" {% if app.request.get('attribute') == 'depart' %} selected {% endif %}>Départ</option>
					<option value="arrivee" {% if app.request.get('attribute') == 'arrivee' %} selected {% endif %}>Arrivée</option>
					<option value="temps" {% if app.request.get('attribute') == 'temps' %} selected {% endif %}>Temps</option>
					<option value="observation" {% if app.request.get('attribute') == 'observation' %} selected {% endif %}>Observation</option>
				</select>
			</div>
			<div class="form-group mr-2">
				<input type="text" name="query" id="searchQueryOld" class="form-control" placeholder="Rechercher..." value="{{ app.request.get('query') }}" autocomplete="off">
			</div>
		</form>

		{# Bouton pour inverser les sélecteurs avec icône #}
		<button class="btn btn-secondary mb-4" id="invertButton">
			<i class="fas fa-exchange-alt"></i>
			<!-- Icône de double flèche -->
		</button>

		{# Nouveau formulaire de recherche #}
		<form id="searchFormNew" class="form-inline mb-4">
			<div class="form-group mr-2">
				<label for="searchAttributeNew" class="sr-only">Rechercher par</label>
				<select name="attribute" id="searchAttributeNew" class="form-control">
					<option value="depart" {% if app.request.get('attribute') == 'depart' %} selected {% endif %}>Départ</option>
					<option value="arrivee" {% if app.request.get('attribute') == 'arrivee' or not app.request.get('attribute') %} selected {% endif %}>Arrivée</option>
					<option value="temps" {% if app.request.get('attribute') == 'temps' %} selected {% endif %}>Temps</option>
					<option value="observation" {% if app.request.get('attribute') == 'observation' %} selected {% endif %}>Observation</option>
				</select>
			</div>
			<div class="form-group mr-2">
				<input type="text" name="query" id="searchQueryNew" class="form-control" placeholder="Rechercher..." value="{{ app.request.get('query') }}" autocomplete="off">
			</div>
		</form>

		<table class="table table-striped table-bg-white">
			<thead class="thead-dark">
				<tr>
					<th scope="col">Départ</th>
					<th scope="col">Arrivée</th>
					<th scope="col">Temps</th>
					<th scope="col">Observation</th>
					<th scope="col">Actions</th>
				</tr>
			</thead>
			<tbody id="trajetList">
				{% include 'trajet/_trajet_list.html.twig' with { 'trajets': trajets } %}
			</tbody>
		</table>

		<a href="{{ path('trajet_new') }}" class="btn btn-primary mt-3">Créer un nouveau trajet</a>
	</div>

	{# Inclure le script JS pour la recherche instantanée et l'inversion avec animation #}
	<script>
		// Fonction pour effectuer la recherche
function performSearch(formId) {
let form = document.getElementById(formId);
let formData = new FormData(form);
let url = '{{ path("trajet_list") }}?' + new URLSearchParams(formData).toString();

fetch(url, {
headers: {
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => response.text()).then(html => {
document.getElementById('trajetList').innerHTML = html;
});
}

// Écouteurs pour la recherche
document.getElementById('searchQueryOld').addEventListener('input', function () {
performSearch('searchFormOld');
});

document.getElementById('searchQueryNew').addEventListener('input', function () {
performSearch('searchFormNew');
});

// Fonction pour inverser les valeurs des deux sélecteurs sans toucher aux champs de recherche avec animation
document.getElementById('invertButton').addEventListener('click', function () {
let oldSelect = document.getElementById('searchAttributeOld');
let newSelect = document.getElementById('searchAttributeNew');
let oldQuery = document.getElementById('searchQueryOld').value;
let newQuery = document.getElementById('searchQueryNew').value;

// Afficher les valeurs avant inversion pour débogage
console.log('Before inversion:');
console.log('Old Select Value:', oldSelect.value);
console.log('New Select Value:', newSelect.value);
console.log('Old Query:', oldQuery);
console.log('New Query:', newQuery);

// Inverser uniquement les valeurs sélectionnées dans les select
let tempValue = oldSelect.value;
oldSelect.value = newSelect.value;
newSelect.value = tempValue;

// Ajouter ou alterner les classes 'rotate' et 'rotate-back' pour faire tourner dans une direction différente à chaque clic
if (this.classList.contains('rotate')) {
this.classList.remove('rotate');
this.classList.add('rotate-back');
} else {
this.classList.remove('rotate-back');
this.classList.add('rotate');
}

// Mettre à jour la valeur des sélecteurs dans les formulaires respectifs
document.getElementById('searchAttributeOld').value = oldSelect.value;
document.getElementById('searchAttributeNew').value = newSelect.value;

// Effectuer la recherche avec les valeurs de recherche actuelles
performSearch('searchFormOld');
performSearch('searchFormNew');

// Afficher les valeurs après inversion pour débogage
console.log('After inversion:');
console.log('Old Select Value:', oldSelect.value);
console.log('New Select Value:', newSelect.value);
console.log('Old Query:', oldQuery);
console.log('New Query:', newQuery);
});
	</script>

	<style>
		/* Animation pour l'icône lors de l'inversion */
		#invertButton i {
			transition: transform 0.5s;
		}

		#invertButton {

			transform: rotate(90deg);
		}

		#invertButton.rotate i {
			transform: rotate(180deg);
		}

		#invertButton {
			transition: transform 0.5s ease;
		}

		.rotate {
			transform: rotate(180deg);
		}

		.rotate-back {
			transform: rotate(360deg);
		}
	</style>
{% endblock %}
